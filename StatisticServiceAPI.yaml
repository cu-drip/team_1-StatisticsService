openapi: 3.0.3
info:
  title: StatisticsService API
  version: 1.0.0
  description: >
    MVP версия сервиса статистики. Обеспечивает приём данных матчей,
    индивидуальную и командную статистику, историю матчей и топ игроков.

servers:
  - url: http://localhost:8081/api/v1

paths:
  /stats/update:
    post:
      summary: Массовая передача результатов матчей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchMatchStatsRequest'
      responses:
        '200':
          description: Данные успешно сохранены

  /stats/player/{userId}:
    get:
      summary: Получить индивидуальную статистику игрока
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Статистика игрока
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerStats'

  /stats/team/{teamId}:
    get:
      summary: Получить статистику команды
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Статистика команды
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamStats'

  /stats/top/players:
    get:
      summary: Получить топ-5 игроков по очкам
      parameters:
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список топ-игроков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'

  /stats/matches/history:
    get:
      summary: Получить историю матчей
      parameters:
        - in: query
          name: participant_id
          schema:
            type: string
            format: uuid
        - in: query
          name: sport
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список матчей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchRecord'

components:
  schemas:
    # Как обсудили, передаем турниры по айди
    BatchMatchStatsRequest:
      type: object
      required:
        - tournamentId
        - sport
        - matches
      properties:
        tournamentId:
          type: string
          format: uuid
        sport:
          type: string
          enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchStatRecord'
    
    # (?) нужно будет передавать один и тот же матч со всеми игроками по очереди, чтобы отслеживать индивидуальную статистику по игрокам/командам.
    # В целом этого достаточно, чтобы удовлетворить всем
    # гет запросам(но это чисто мвп, на следующих спринтах нужно будет как-то расширить функционал хз...) 
    MatchStatRecord:
      type: object
      required:
        - matchId
        - participantId
        - participantType
        - points
        - isWinner
      properties:
        matchId:
          type: string
          format: uuid
        participantId:
          type: string
          format: uuid
        participantType:
          type: string
          enum: [player, team]
        points:
          type: integer
        isWinner:
          type: boolean

      
      
        # Опциональные дополнительные метрики(могут дополняться/изменяться), поддерживают null:
        goals:
          type: integer
          description: Количество голов (football, hockey)
          nullable: true
        assists:
          type: integer
          description: Передачи с результативным действием
          nullable: true
        fouls:
          type: integer
          description: Количество фолов (football, basketball и т.п.)
          nullable: true
        yellowCards:
          type: integer
          nullable: true
        redCards:
          type: integer
          nullable: true
        knockdowns:
          type: integer
          description: Для боевых видов спорта (boxing, mma)
          nullable: true
        submissions:
          type: integer
          description: Завершение поединка сдачей (jiu_jitsu)
          nullable: true
        setsWon:
          type: integer
          description: Для тенниса или настольного тенниса
          nullable: true
        timePlayed:
          type: number
          format: float
          description: Время, проведённое на площадке (в минутах)
          nullable: true

    

    MatchRecord:
      type: object
      properties:
        matchId:
          type: string
          format: uuid
        participantId:
          type: string
          format: uuid
        participantType:
          type: string
        points:
          type: integer
        isWinner:
          type: boolean

    PlayerStats:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        totalGames:
          type: integer
        totalPoints:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer

    TeamStats:
      type: object
      properties:
        teamId:
          type: string
          format: uuid
        totalGames:
          type: integer
        totalPoints:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer
