openapi: 3.0.3
info:
  title: StatisticsService API
  version: 1.0.0
  description: |
    Расширенный MVP-контракт StatisticsService. Поддерживает приём результатов матчей
    по турниру с вложенными участниками, индивидуальную и командную статистику,
    историю матчей и топ игроков. Добавлены query-параметры для фильтрации по виду спорта,
    а также поле tournamentType в POST (пока не используется).

servers:
  - url: http://localhost:8081/api/v1

paths:
  /stats/update:
    post:
      summary: Загрузка результатов матчей по турниру
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentMatchStatsRequest'
      responses:
        '200':
          description: Данные успешно приняты

  /stats/player/{userId}:
    get:
      summary: Получить индивидуальную статистику игрока
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Статистика игрока
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerStats'

  /stats/team/{teamId}:
    get:
      summary: Получить статистику команды
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Статистика команды
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamStats'

  /stats/top/players:
    get:
      summary: Получить топ-5 игроков по очкам
      parameters:
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список топ-игроков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'

  /stats/matches/history:
    get:
      summary: Получить историю матчей
      parameters:
        - in: query
          name: participant_id
          schema:
            type: string
            format: uuid
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список матчей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchRecord'

components:
  schemas:
    TournamentMatchStatsRequest:
      type: object
      required:
        - tournamentId
        - sport
        - tournamentType
        - matches
      properties:
        tournamentId:
          type: string
          format: uuid
        sport:
          type: string
          enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
        tournamentType:
          type: string
          enum: [round_robin, single_elimination, double_elimination, group_stage]
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchWithParticipants'

    MatchWithParticipants:
      type: object
      required:
        - matchId
        - participants
      properties:
        matchId:
          type: string
          format: uuid
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MatchParticipantStats'

    MatchParticipantStats:
      type: object
      required:
        - participantId
        - participantType
        - points
        - isWinner
      properties:
        participantId:
          type: string
          format: uuid
        participantType:
          type: string
          enum: [player, team]
        points:
          type: integer
        isWinner:
          type: boolean
        goals:
          type: integer
          nullable: true
        assists:
          type: integer
          nullable: true
        fouls:
          type: integer
          nullable: true
        yellowCards:
          type: integer
          nullable: true
        redCards:
          type: integer
          nullable: true
        knockdowns:
          type: integer
          nullable: true
        submissions:
          type: integer
          nullable: true
        setsWon:
          type: integer
          nullable: true
        timePlayed:
          type: number
          format: float
          nullable: true

    PlayerStats:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        totalGames:
          type: integer
        totalPoints:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer

    TeamStats:
      type: object
      properties:
        teamId:
          type: string
          format: uuid
        totalGames:
          type: integer
        totalPoints:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer

    MatchRecord:
      type: object
      properties:
        matchId:
          type: string
          format: uuid
        participantId:
          type: string
          format: uuid
        participantType:
          type: string
        points:
          type: integer
        isWinner:
          type: boolean

