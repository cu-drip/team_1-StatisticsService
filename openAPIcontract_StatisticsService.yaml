openapi: 3.0.3
info:
  title: StatisticsService API
  version: 1.0.0
  description: >
    Микросервис для агрегации результатов матчей, индивидуальной и командной статистики,
    построения отчётов по турнирам и визуализации данных.

servers:
  - url: http://localhost:8081/api/v1

paths:
  /stats/player/{userId}:
    get:
      summary: Получить индивидуальную статистику участника
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
         - in: query  # Добавлен параметр для фильтрации по виду спорта
          name: sport
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Статистика игрока
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerStats'

  /stats/team/{teamId}:
    get:
      summary: Получить агрегированную статистику команды
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Статистика команды
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamStats'

  /stats/tournament/{tournamentId}:
    get:
      summary: Получить статистику по турниру
      parameters:
        - in: path
          name: tournamentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Разбивка по этапам турнира
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentStats'

  /stats/top/players:
    get:
      summary: Получить топ-5 игроков по среднему количеству очков
      parameters:
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu jitsu]
      responses:
        '200':
          description: Список лучших игроков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'

  /stats/visual/team/{teamId}:
    get:
      summary: Получить данные для визуализации статистики команды
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: JSON-данные для построения графиков
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationData'
   /stats/matches/history:
    get:
      summary: Получить историю матчей с фильтрами
      parameters:
        - in: query
          name: player_id
          schema:
            type: string
            format: uuid
        - in: query
          name: team_id
          schema:
            type: string
            format: uuid
        - in: query
          name: tournament_id
          schema:
            type: string
            format: uuid
        - in: query
          name: sport
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список матчей с результатами
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedMatchResult'

  /stats/aggregate/players:
    get:
      summary: Агрегированная статистика всех игроков
      parameters:
        - in: query
          name: sport
          required: true
          schema:
            type: string
            enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
      responses:
        '200':
          description: Список игроков с статистикой
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'

  /stats/tournament/{tournamentId}/stages:
    get:
      summary: Получить детализацию стадий турнира
      parameters:
        - in: path
          name: tournamentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Полная сетка турнира
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentStages'

components:
  schemas:
    PlayerStats:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        totalGames:
          type: integer
        totalPoints:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer

    TeamStats:
      type: object
      properties:
        teamId:
          type: string
          format: uuid
        name:
          type: string
        gamesPlayed:
          type: integer
        averagePoints:
          type: number
          format: float
        totalWins:
          type: integer
        topPlayers:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStats'

    TournamentStats:
      type: object
      properties:
        tournamentId:
          type: string
          format: uuid
        title:
          type: string
        sport:
          type: string
        stages:
          type: array
          items:
            $ref: '#/components/schemas/TournamentStage'

    TournamentStage:
      type: object
      properties:
        stageName:
          type: string
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchResult'

    MatchResult:
      type: object
      properties:
        matchId:
          type: string
          format: uuid
        startedAt:
          type: string
          format: date-time
        partition1Id:
          type: string
          format: uuid
        partition2Id:
          type: string
          format: uuid
        partition1Points:
          type: integer
        partition2Points:
          type: integer
        winnerId:
          type: string
          format: uuid

    VisualizationData:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        values:
          type: array
          items:
            type: number

    # Существующие схемы остаются
    # Добавлены новые:
    
    ExtendedMatchResult:
      type: object
      properties:
        matchId:
          type: string
          format: uuid
        tournamentId:
          type: string
          format: uuid
        tournamentTitle:
          type: string
        sport:
          type: string
          enum: [football, boxing, basketball, chess, tennis, jiu_jitsu]
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MatchParticipant'
        events:  # Для детализации (голы, фолы и т.д.)
          type: array
          items:
            $ref: '#/components/schemas/MatchEvent'

    MatchParticipant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [player, team]
        name:
          type: string
        points:
          type: integer
        isWinner:
          type: boolean

    TournamentStages:
      type: object
      properties:
        tournamentId:
          type: string
          format: uuid
        stages:
          type: array
          items:
            $ref: '#/components/schemas/TournamentStageDetails'

    TournamentStageDetails:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [group, playoff, round_robin]
        matches:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedMatchResult'

